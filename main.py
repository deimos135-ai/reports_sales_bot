# main.py
import os
import asyncio
import logging
from typing import Any, Dict, List, Tuple, DefaultDict, Optional
from collections import defaultdict
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo

import aiohttp
from fastapi import FastAPI

app = FastAPI()
log = logging.getLogger("report")
logging.basicConfig(level=os.getenv("LOG_LEVEL", "INFO"))

# -------------------- ENV CONFIG --------------------
# –ü—Ä–∏–∫–ª–∞–¥: B24_BASE_URL = "https://your.bitrix24.ua/rest/123/xxxxxxxxxxxxxxxxxxxx/"
B24_BASE_URL = os.getenv("B24_BASE_URL", "").rstrip("/") + "/"
# –¢–∞–π–º–∑–æ–Ω–∞, –¥–µ —É –≤–∞—Å ¬´–¥–µ–Ω—å¬ª. –ù–∞–ø—Ä., Europe/Kyiv
LOCAL_TZ = os.getenv("LOCAL_TZ", "Europe/Kyiv")

# –°–∫—ñ–ª—å–∫–∏ –º–∞–∫—Å. —Ä—è–¥–∫—ñ–≤ –¥–æ–∑–≤–æ–ª—è—î–º–æ –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –∑–∞ –æ–¥–∏–Ω –∑–∞–ø–∏—Ç-–∑–≤—ñ—Ç (safety valve)
# –Ø–∫—â–æ –¥–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–∏–π —ñ –¥–∞–Ω–∏—Ö –±–∞–≥–∞—Ç–æ ‚Äî –ø—ñ–¥–µ –≤ –ø–∞–≥—ñ–Ω–∞—Ü—ñ—é, –∞–ª–µ –Ω–µ –±—ñ–ª—å—à–µ HARD_LIMIT
HARD_LIMIT = int(os.getenv("HARD_LIMIT", "50000"))
PAGE_SIZE = int(os.getenv("PAGE_SIZE", "200"))
THROTTLE_SEC = float(os.getenv("THROTTLE_SEC", "0.05"))  # –ø–∞—É–∑–∞ –º—ñ–∂ —Å—Ç–æ—Ä—ñ–Ω–∫–∞–º–∏

# -------------------- UTILS --------------------
def _as_int(x: Any, default: int = 0) -> int:
    try:
        if isinstance(x, bool):
            return int(x)
        if isinstance(x, (int, float)):
            return int(x)
        s = str(x).strip()
        # –∫–æ–¥ —Ç–∏–ø—É "603-S" –Ω–µ —î —á–∏—Å–ª–æ–º
        return int(s) if s.lstrip("+-").isdigit() else default
    except Exception:
        return default

def _as_str(x: Any) -> str:
    return "" if x is None else str(x)

def _operator_name(portal_user_id: Any) -> str:
    # –•—É–∫ –ø—ñ–¥ –≤–∞—à –º–∞–ø–ø—ñ–Ω–≥ (–º–æ–∂–Ω–∞ –ø—ñ–¥—Å—Ç–∞–≤–∏—Ç–∏ –∫–µ—à –∑ Bitrix users.get)
    pid = _as_str(portal_user_id).strip()
    if not pid:
        return "–ù–µ–≤—ñ–¥–æ–º–∏–π"
    # –ø—Ä–∏–∫–ª–∞–¥ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–∞–ø—É –∑ env JSON –∞–±–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ ID
    return os.getenv(f"OP_{pid}", f"ID {pid}")

def _day_bounds(offset_days: int = 0) -> Tuple[str, datetime, datetime, str, str]:
    tz = ZoneInfo(LOCAL_TZ)
    today = datetime.now(tz).date()
    day = today + timedelta(days=offset_days)
    start = datetime.combine(day, datetime.min.time()).replace(tzinfo=tz)
    end = start + timedelta(days=1)
    # Bitrix –ª—é–±–∏—Ç—å ISO –∑ –∑—Å—É–≤–æ–º
    start_iso = start.isoformat()
    end_iso = end.isoformat()
    label = day.strftime("%d.%m.%Y")
    return label, start, end, start_iso, end_iso

async def _b24_call(session: aiohttp.ClientSession, method: str, params: Dict[str, Any]) -> Dict[str, Any]:
    # REST endpoint: {BASE}/voximplant.statistic.get.json
    url = f"{B24_BASE_URL}{method}.json"
    async with session.post(url, data=params, timeout=aiohttp.ClientTimeout(total=90)) as resp:
        resp.raise_for_status()
        return await resp.json(content_type=None)

async def b24_paginated_list(
    method: str,
    *,
    filter: Dict[str, Any],
    select: List[str],
    page_size: int = PAGE_SIZE,
    hard_limit: int = HARD_LIMIT,
    throttle: float = THROTTLE_SEC,
) -> List[Dict[str, Any]]:
    """
    –ó–∞–≥–∞–ª—å–Ω–∏–π –ø–∞–≥—ñ–Ω–∞—Ç–æ—Ä –¥–ª—è Bitrix list-–º–µ—Ç–æ–¥—ñ–≤ –∑—ñ —Å—Ö–µ–º–æ—é start/next.
    """
    rows: List[Dict[str, Any]] = []
    start = 0
    seen = 0

    async with aiohttp.ClientSession() as session:
        while True:
            params: Dict[str, Any] = {
                "select[]": select,  # –º–∞—Å–∏–≤ —Å–µ–ª–µ–∫—Ç—ñ–≤
                "start": start,
            }
            # –§—ñ–ª—å—Ç—Ä: –∫–ª—é—á—ñ —Ç–∏–ø—É ">=CALL_START_DATE" –º–∞—é—Ç—å –π—Ç–∏ —è–∫ filter[>=CALL_START_DATE]
            for k, v in filter.items():
                params[f"filter[{k}]"] = v

            # –î–æ–¥–∞—Ç–∫–æ–≤–æ: –¥–µ—è–∫—ñ –º–µ—Ç–æ–¥–∏ –ø—Ä–∏–π–º–∞—é—Ç—å "limit"
            params["limit"] = page_size

            data = await _b24_call(session, method, params)
            result = data.get("result", [])
            total = data.get("total")  # –º–æ–∂–µ –±—É—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–º
            nxt = data.get("next")

            if not isinstance(result, list):
                log.warning("Unexpected result type: %s", type(result))
                break

            rows.extend(result)
            seen += len(result)

            # –ü—Ä–æ–≥—Ä–µ—Å-–ª–æ–≥ –∫–æ–∂–Ω—ñ ~1000 —Ä—è–¥–∫—ñ–≤
            if seen % 1000 < len(result):
                log.info("[b24] fetched %s rows (start=%s, next=%s, total=%s)", seen, start, nxt, total)

            if seen >= hard_limit:
                log.warning("[b24] hard limit reached: %s", hard_limit)
                break

            if nxt is None:
                break

            start = nxt
            if throttle:
                await asyncio.sleep(throttle)

    return rows

# -------------------- TELEPHONY LOGIC --------------------
def _is_incoming(r: Dict[str, Any]) -> bool:
    return _as_int(r.get("CALL_TYPE"), -1) == 1

def _is_outgoing(r: Dict[str, Any]) -> bool:
    return _as_int(r.get("CALL_TYPE"), -1) == 2

def _is_missed_incoming(r: Dict[str, Any]) -> bool:
    # –ü—Ä–æ–ø—É—â–µ–Ω–∏–π ‚Äî –¢–Ü–õ–¨–ö–ò –≤—Ö—ñ–¥–Ω–∏–π —ñ –∑ –Ω—É–ª—å–æ–≤–æ—é —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—é
    if not _is_incoming(r):
        return False
    dur = _as_int(r.get("CALL_DURATION") or r.get("DURATION"), 0)
    return dur <= 0

def _is_answered_incoming(r: Dict[str, Any]) -> bool:
    if not _is_incoming(r):
        return False
    dur = _as_int(r.get("CALL_DURATION") or r.get("DURATION"), 0)
    code = _as_str(r.get("CALL_FAILED_CODE")).upper()
    # –£ –ø—Ä–∞–∫—Ç–∏—Ü—ñ Bitrix/Asterisk –ø—Ä–∏–π–Ω—è—Ç–∏–π –∑–∞–∑–≤–∏—á–∞–π –º–∞—î duration>0, –∞ –∫–æ–¥ "200"/–ø–æ—Ä–æ–∂–Ω—ñ–π/OK
    return (dur > 0) and (code in ("", "0", "200", "OK"))

async def fetch_telephony_for_day(offset_days: int = 0) -> Dict[str, Any]:
    label, _, _, start_iso, end_iso = _day_bounds(offset_days)

    select = [
        "ID",
        "PORTAL_USER_ID",
        "PORTAL_NUMBER",
        "PHONE_NUMBER",
        "CALL_ID",
        "CALL_CATEGORY",
        "CALL_DURATION",
        "CALL_START_DATE",
        "CALL_FAILED_CODE",
        "CALL_TYPE",
    ]
    flt = {
        ">=CALL_START_DATE": start_iso,
        "<CALL_START_DATE": end_iso,
    }

    rows = await b24_paginated_list(
        "voximplant.statistic.get",
        filter=flt,
        select=select,
        page_size=PAGE_SIZE,
        hard_limit=HARD_LIMIT,
        throttle=THROTTLE_SEC,
    )
    log.info("[telephony] %s: fetched %s calls", label, len(rows))

    missed_total = 0
    incoming_answered_total = 0
    outgoing_total = 0

    per_incoming_by_op: DefaultDict[str, int] = defaultdict(int)
    per_outgoing_by_op: DefaultDict[str, int] = defaultdict(int)

    for r in rows:
        name = _operator_name(r.get("PORTAL_USER_ID"))

        if _is_incoming(r):
            if _is_missed_incoming(r):
                missed_total += 1
            elif _is_answered_incoming(r):
                incoming_answered_total += 1
                per_incoming_by_op[name] += 1
            else:
                # –Ü–Ω—à—ñ –≤—Ö—ñ–¥–Ω—ñ (–Ω–∞–ø—Ä., zero duration + –∫–æ–¥ 200 –Ω–µ —Ç—Ä–∞–ø–ª—è—î—Ç—å—Å—è, –∞–ª–µ –Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
                missed_total += 1

        if _is_outgoing(r):
            outgoing_total += 1
            per_outgoing_by_op[name] += 1

    def _sorted_items(d: Dict[str, int]) -> List[Tuple[str, int]]:
        return sorted(d.items(), key=lambda x: (-x[1], x[0]))

    return {
        "missed_total": missed_total,
        "incoming_answered_total": incoming_answered_total,
        "outgoing_total": outgoing_total,
        "incoming_by_operator": _sorted_items(per_incoming_by_op),
        "outgoing_by_operator": _sorted_items(per_outgoing_by_op),
        "total_rows": len(rows),
    }

# -------------------- REPORT TEXT --------------------
def build_report_text(offset_days: int, telephony: Dict[str, Any]) -> str:
    label, *_ = _day_bounds(offset_days)
    missed = telephony["missed_total"]
    in_ok = telephony["incoming_answered_total"]
    out_all = telephony["outgoing_total"]

    inc_ops = telephony["incoming_by_operator"]
    out_ops = telephony["outgoing_by_operator"]

    def lines_for_ops(title: str, items: List[Tuple[str, int]]) -> str:
        if not items:
            return ""
        s = [title]
        for name, cnt in items:
            s.append(f"‚Ä¢ {name}: {cnt}")
        return "\n".join(s)

    chunks = [
        f"üóì –î–∞—Ç–∞: {label}",
        "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ",
        "üìû –¢–µ–ª–µ—Ñ–æ–Ω—ñ—è",
        f"üîï –ü—Ä–æ–ø—É—â–µ–Ω–∏—Ö: {missed}",
        f"üì• –í—Ö—ñ–¥–Ω–∏—Ö (–ø—Ä–∏–π–Ω—è—Ç–∏—Ö): {in_ok}",
        f"üì§ –í–∏—Ö—ñ–¥–Ω–∏—Ö: {out_all}",
    ]

    inc_block = lines_for_ops("\nüë• –ü–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º (–≤—Ö—ñ–¥–Ω—ñ, –ø—Ä–∏–π–Ω—è—Ç—ñ):", inc_ops)
    out_block = lines_for_ops("\nüë• –ü–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º (–≤–∏—Ö—ñ–¥–Ω—ñ):", out_ops)

    if inc_block:
        chunks.append(inc_block)
    if out_block:
        chunks.append(out_block)

    chunks.append("‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
    return "\n".join(chunks)

# -------------------- HTTP HANDLERS --------------------
@app.get("/report/today")
async def report_today() -> Dict[str, Any]:
    t = await fetch_telephony_for_day(0)
    return {
        "text": build_report_text(0, t),
        "raw": t,
    }

@app.get("/report/yesterday")
async def report_yesterday() -> Dict[str, Any]:
    t = await fetch_telephony_for_day(-1)
    return {
        "text": build_report_text(-1, t),
        "raw": t,
    }

# –∫–æ—Ä–µ–Ω–µ–≤–∏–π —Ö–µ–ª—Å—á–µ–∫
@app.get("/")
async def root():
    return {"ok": True}
